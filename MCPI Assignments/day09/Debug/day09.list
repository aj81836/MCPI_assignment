
day09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000598  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000720  08000720  00001720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000734  08000734  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000734  08000734  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000734  08000734  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000734  08000734  00001734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000738  08000738  00001738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800073c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ef3  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004e0  00000000  00000000  00002f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000118  00000000  00000000  00003408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000bb  00000000  00000000  00003520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018fab  00000000  00000000  000035db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000015b6  00000000  00000000  0001c586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b7e6  00000000  00000000  0001db3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a9322  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002d8  00000000  00000000  000a9368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a9640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005b  00000000  00000000  000a965f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000708 	.word	0x08000708

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000708 	.word	0x08000708

080001c8 <EEPROM_Init>:
 *      Author: Nilesh
 */

#include "eeprom.h"

void EEPROM_Init(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	int ret;
	I2CInit();
 80001ce:	f000 f965 	bl	800049c <I2CInit>
	// optional -- check if eeprom is present
	I2CStart();
 80001d2:	f000 f8a3 	bl	800031c <I2CStart>
	ret = I2CIsDeviceReady(EEPROM_W);
 80001d6:	20a0      	movs	r0, #160	@ 0xa0
 80001d8:	f000 f942 	bl	8000460 <I2CIsDeviceReady>
 80001dc:	6078      	str	r0, [r7, #4]
	// if ret=0, eeprom not avail; otherwise, eeprom is avail.
	I2CStop();
 80001de:	f000 f8b9 	bl	8000354 <I2CStop>
}
 80001e2:	bf00      	nop
 80001e4:	3708      	adds	r7, #8
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}

080001ea <EEPROM_Write>:

void EEPROM_Write(uint16_t addr, uint8_t byte[], uint8_t n) {
 80001ea:	b580      	push	{r7, lr}
 80001ec:	b084      	sub	sp, #16
 80001ee:	af00      	add	r7, sp, #0
 80001f0:	4603      	mov	r3, r0
 80001f2:	6039      	str	r1, [r7, #0]
 80001f4:	80fb      	strh	r3, [r7, #6]
 80001f6:	4613      	mov	r3, r2
 80001f8:	717b      	strb	r3, [r7, #5]
	uint8_t high = addr >> 8, low = addr & 0xFF;
 80001fa:	88fb      	ldrh	r3, [r7, #6]
 80001fc:	0a1b      	lsrs	r3, r3, #8
 80001fe:	b29b      	uxth	r3, r3
 8000200:	72fb      	strb	r3, [r7, #11]
 8000202:	88fb      	ldrh	r3, [r7, #6]
 8000204:	72bb      	strb	r3, [r7, #10]
	I2CStart();
 8000206:	f000 f889 	bl	800031c <I2CStart>
	I2CSendSlaveAddress(EEPROM_W);
 800020a:	20a0      	movs	r0, #160	@ 0xa0
 800020c:	f000 f8b8 	bl	8000380 <I2CSendSlaveAddress>
	I2CSendData(high);
 8000210:	7afb      	ldrb	r3, [r7, #11]
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f8ce 	bl	80003b4 <I2CSendData>
	I2CSendData(low);
 8000218:	7abb      	ldrb	r3, [r7, #10]
 800021a:	4618      	mov	r0, r3
 800021c:	f000 f8ca 	bl	80003b4 <I2CSendData>
	for(int i=0; i<n; i++)
 8000220:	2300      	movs	r3, #0
 8000222:	60fb      	str	r3, [r7, #12]
 8000224:	e009      	b.n	800023a <EEPROM_Write+0x50>
		I2CSendData(byte[i]);
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	683a      	ldr	r2, [r7, #0]
 800022a:	4413      	add	r3, r2
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	4618      	mov	r0, r3
 8000230:	f000 f8c0 	bl	80003b4 <I2CSendData>
	for(int i=0; i<n; i++)
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	3301      	adds	r3, #1
 8000238:	60fb      	str	r3, [r7, #12]
 800023a:	797b      	ldrb	r3, [r7, #5]
 800023c:	68fa      	ldr	r2, [r7, #12]
 800023e:	429a      	cmp	r2, r3
 8000240:	dbf1      	blt.n	8000226 <EEPROM_Write+0x3c>
	I2CStop();
 8000242:	f000 f887 	bl	8000354 <I2CStop>
}
 8000246:	bf00      	nop
 8000248:	3710      	adds	r7, #16
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}

0800024e <EEPROM_Read>:

void EEPROM_Read(uint16_t addr, uint8_t byte[], uint8_t n) {
 800024e:	b590      	push	{r4, r7, lr}
 8000250:	b085      	sub	sp, #20
 8000252:	af00      	add	r7, sp, #0
 8000254:	4603      	mov	r3, r0
 8000256:	6039      	str	r1, [r7, #0]
 8000258:	80fb      	strh	r3, [r7, #6]
 800025a:	4613      	mov	r3, r2
 800025c:	717b      	strb	r3, [r7, #5]
	int i;
	uint8_t high = addr >> 8, low = addr & 0xFF;
 800025e:	88fb      	ldrh	r3, [r7, #6]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	b29b      	uxth	r3, r3
 8000264:	72fb      	strb	r3, [r7, #11]
 8000266:	88fb      	ldrh	r3, [r7, #6]
 8000268:	72bb      	strb	r3, [r7, #10]
	I2CStart();
 800026a:	f000 f857 	bl	800031c <I2CStart>
	I2CSendSlaveAddress(EEPROM_W);
 800026e:	20a0      	movs	r0, #160	@ 0xa0
 8000270:	f000 f886 	bl	8000380 <I2CSendSlaveAddress>
	I2CSendData(high);
 8000274:	7afb      	ldrb	r3, [r7, #11]
 8000276:	4618      	mov	r0, r3
 8000278:	f000 f89c 	bl	80003b4 <I2CSendData>
	I2CSendData(low);
 800027c:	7abb      	ldrb	r3, [r7, #10]
 800027e:	4618      	mov	r0, r3
 8000280:	f000 f898 	bl	80003b4 <I2CSendData>
	I2CRepeatStart();
 8000284:	f000 f860 	bl	8000348 <I2CRepeatStart>
	I2CSendSlaveAddress(EEPROM_R);
 8000288:	20a1      	movs	r0, #161	@ 0xa1
 800028a:	f000 f879 	bl	8000380 <I2CSendSlaveAddress>
	for(i=0; i<n-1; i++)
 800028e:	2300      	movs	r3, #0
 8000290:	60fb      	str	r3, [r7, #12]
 8000292:	e009      	b.n	80002a8 <EEPROM_Read+0x5a>
		byte[i] = I2CRecvDataAck();
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	683a      	ldr	r2, [r7, #0]
 8000298:	18d4      	adds	r4, r2, r3
 800029a:	f000 f8a9 	bl	80003f0 <I2CRecvDataAck>
 800029e:	4603      	mov	r3, r0
 80002a0:	7023      	strb	r3, [r4, #0]
	for(i=0; i<n-1; i++)
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	3301      	adds	r3, #1
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	797b      	ldrb	r3, [r7, #5]
 80002aa:	3b01      	subs	r3, #1
 80002ac:	68fa      	ldr	r2, [r7, #12]
 80002ae:	429a      	cmp	r2, r3
 80002b0:	dbf0      	blt.n	8000294 <EEPROM_Read+0x46>
	byte[i] = I2CRecvDataNAck();
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	683a      	ldr	r2, [r7, #0]
 80002b6:	18d4      	adds	r4, r2, r3
 80002b8:	f000 f8b6 	bl	8000428 <I2CRecvDataNAck>
 80002bc:	4603      	mov	r3, r0
 80002be:	7023      	strb	r3, [r4, #0]
	I2CStop();
 80002c0:	f000 f848 	bl	8000354 <I2CStop>
}
 80002c4:	bf00      	nop
 80002c6:	3714      	adds	r7, #20
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd90      	pop	{r4, r7, pc}

080002cc <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80002cc:	b480      	push	{r7}
 80002ce:	b085      	sub	sp, #20
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80002d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000310 <DelayMs+0x44>)
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80002da:	4b0e      	ldr	r3, [pc, #56]	@ (8000314 <DelayMs+0x48>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a0e      	ldr	r2, [pc, #56]	@ (8000318 <DelayMs+0x4c>)
 80002e0:	fba2 2303 	umull	r2, r3, r2, r3
 80002e4:	099b      	lsrs	r3, r3, #6
 80002e6:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	68ba      	ldr	r2, [r7, #8]
 80002ec:	fb02 f303 	mul.w	r3, r2, r3
 80002f0:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80002f2:	bf00      	nop
 80002f4:	4b06      	ldr	r3, [pc, #24]	@ (8000310 <DelayMs+0x44>)
 80002f6:	685a      	ldr	r2, [r3, #4]
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	1ad2      	subs	r2, r2, r3
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	429a      	cmp	r2, r3
 8000300:	d3f8      	bcc.n	80002f4 <DelayMs+0x28>
}
 8000302:	bf00      	nop
 8000304:	bf00      	nop
 8000306:	3714      	adds	r7, #20
 8000308:	46bd      	mov	sp, r7
 800030a:	bc80      	pop	{r7}
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	e0001000 	.word	0xe0001000
 8000314:	20000000 	.word	0x20000000
 8000318:	10624dd3 	.word	0x10624dd3

0800031c <I2CStart>:
 *      Author: Nilesh
 */

#include "i2c.h"

void I2CStart() {
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START;
 8000320:	4b08      	ldr	r3, [pc, #32]	@ (8000344 <I2CStart+0x28>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a07      	ldr	r2, [pc, #28]	@ (8000344 <I2CStart+0x28>)
 8000326:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800032a:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_SB));
 800032c:	bf00      	nop
 800032e:	4b05      	ldr	r3, [pc, #20]	@ (8000344 <I2CStart+0x28>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	f003 0301 	and.w	r3, r3, #1
 8000336:	2b00      	cmp	r3, #0
 8000338:	d0f9      	beq.n	800032e <I2CStart+0x12>
}
 800033a:	bf00      	nop
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr
 8000344:	40005400 	.word	0x40005400

08000348 <I2CRepeatStart>:

void I2CRepeatStart() {
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	I2CStart();
 800034c:	f7ff ffe6 	bl	800031c <I2CStart>
}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}

08000354 <I2CStop>:

void I2CStop() {
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 8000358:	4b08      	ldr	r3, [pc, #32]	@ (800037c <I2CStop+0x28>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a07      	ldr	r2, [pc, #28]	@ (800037c <I2CStop+0x28>)
 800035e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000362:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR2 & I2C_SR2_BUSY));
 8000364:	bf00      	nop
 8000366:	4b05      	ldr	r3, [pc, #20]	@ (800037c <I2CStop+0x28>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	f003 0302 	and.w	r3, r3, #2
 800036e:	2b00      	cmp	r3, #0
 8000370:	d0f9      	beq.n	8000366 <I2CStop+0x12>
}
 8000372:	bf00      	nop
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr
 800037c:	40005400 	.word	0x40005400

08000380 <I2CSendSlaveAddress>:

void I2CSendSlaveAddress(uint8_t slaveaddr) {
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
    // send slaveaddr
    // wait until address is sent
    I2C1->DR = slaveaddr;
 800038a:	4a09      	ldr	r2, [pc, #36]	@ (80003b0 <I2CSendSlaveAddress+0x30>)
 800038c:	79fb      	ldrb	r3, [r7, #7]
 800038e:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000390:	bf00      	nop
 8000392:	4b07      	ldr	r3, [pc, #28]	@ (80003b0 <I2CSendSlaveAddress+0x30>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	f003 0302 	and.w	r3, r3, #2
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0f9      	beq.n	8000392 <I2CSendSlaveAddress+0x12>
    // dummy read to clear flags
    (void)I2C1->SR1;
 800039e:	4b04      	ldr	r3, [pc, #16]	@ (80003b0 <I2CSendSlaveAddress+0x30>)
 80003a0:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2; // clear addr condition
 80003a2:	4b03      	ldr	r3, [pc, #12]	@ (80003b0 <I2CSendSlaveAddress+0x30>)
 80003a4:	699b      	ldr	r3, [r3, #24]
}
 80003a6:	bf00      	nop
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr
 80003b0:	40005400 	.word	0x40005400

080003b4 <I2CSendData>:

void I2CSendData(uint8_t val) {
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	71fb      	strb	r3, [r7, #7]
    // send data in write mode
    // wait until address is sent
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 80003be:	bf00      	nop
 80003c0:	4b0a      	ldr	r3, [pc, #40]	@ (80003ec <I2CSendData+0x38>)
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d0f9      	beq.n	80003c0 <I2CSendData+0xc>
    // write dr and clear flags
    I2C1->DR = val;
 80003cc:	4a07      	ldr	r2, [pc, #28]	@ (80003ec <I2CSendData+0x38>)
 80003ce:	79fb      	ldrb	r3, [r7, #7]
 80003d0:	6113      	str	r3, [r2, #16]
    // wait until data byte is transferred
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 80003d2:	bf00      	nop
 80003d4:	4b05      	ldr	r3, [pc, #20]	@ (80003ec <I2CSendData+0x38>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	f003 0304 	and.w	r3, r3, #4
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d0f9      	beq.n	80003d4 <I2CSendData+0x20>
}
 80003e0:	bf00      	nop
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	40005400 	.word	0x40005400

080003f0 <I2CRecvDataAck>:

uint8_t I2CRecvDataAck(void) {
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
	uint8_t val;
	I2C1->CR1 |= I2C_CR1_ACK | I2C_CR1_POS;
 80003f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000424 <I2CRecvDataAck+0x34>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000424 <I2CRecvDataAck+0x34>)
 80003fc:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000400:	6013      	str	r3, [r2, #0]
	// wait until receive buffer is not empty
	while (!(I2C1->SR1 & I2C_SR1_RXNE));
 8000402:	bf00      	nop
 8000404:	4b07      	ldr	r3, [pc, #28]	@ (8000424 <I2CRecvDataAck+0x34>)
 8000406:	695b      	ldr	r3, [r3, #20]
 8000408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800040c:	2b00      	cmp	r3, #0
 800040e:	d0f9      	beq.n	8000404 <I2CRecvDataAck+0x14>
	// read content and clear flags
	val = (uint8_t)I2C1->DR;
 8000410:	4b04      	ldr	r3, [pc, #16]	@ (8000424 <I2CRecvDataAck+0x34>)
 8000412:	691b      	ldr	r3, [r3, #16]
 8000414:	71fb      	strb	r3, [r7, #7]
	return val;
 8000416:	79fb      	ldrb	r3, [r7, #7]
}
 8000418:	4618      	mov	r0, r3
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	bc80      	pop	{r7}
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	40005400 	.word	0x40005400

08000428 <I2CRecvDataNAck>:

uint8_t I2CRecvDataNAck(void) {
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
	uint8_t val;
	I2C1->CR1 &= ~(I2C_CR1_ACK | I2C_CR1_POS);
 800042e:	4b0b      	ldr	r3, [pc, #44]	@ (800045c <I2CRecvDataNAck+0x34>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a0a      	ldr	r2, [pc, #40]	@ (800045c <I2CRecvDataNAck+0x34>)
 8000434:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000438:	6013      	str	r3, [r2, #0]
	// wait until receive buffer is not empty
	while (!(I2C1->SR1 & I2C_SR1_RXNE));
 800043a:	bf00      	nop
 800043c:	4b07      	ldr	r3, [pc, #28]	@ (800045c <I2CRecvDataNAck+0x34>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000444:	2b00      	cmp	r3, #0
 8000446:	d0f9      	beq.n	800043c <I2CRecvDataNAck+0x14>
	// read content and clear flags
	val = I2C1->DR;
 8000448:	4b04      	ldr	r3, [pc, #16]	@ (800045c <I2CRecvDataNAck+0x34>)
 800044a:	691b      	ldr	r3, [r3, #16]
 800044c:	71fb      	strb	r3, [r7, #7]
	return val;
 800044e:	79fb      	ldrb	r3, [r7, #7]
}
 8000450:	4618      	mov	r0, r3
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	40005400 	.word	0x40005400

08000460 <I2CIsDeviceReady>:

int I2CIsDeviceReady(uint8_t slaveaddr) {
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	71fb      	strb	r3, [r7, #7]
    // send slaveaddr of write
	slaveaddr &= ~BV(0);
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	f023 0301 	bic.w	r3, r3, #1
 8000470:	71fb      	strb	r3, [r7, #7]
    // wait until address is sent
    I2C1->DR = slaveaddr;
 8000472:	4a09      	ldr	r2, [pc, #36]	@ (8000498 <I2CIsDeviceReady+0x38>)
 8000474:	79fb      	ldrb	r3, [r7, #7]
 8000476:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000478:	bf00      	nop
 800047a:	4b07      	ldr	r3, [pc, #28]	@ (8000498 <I2CIsDeviceReady+0x38>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f003 0302 	and.w	r3, r3, #2
 8000482:	2b00      	cmp	r3, #0
 8000484:	d0f9      	beq.n	800047a <I2CIsDeviceReady+0x1a>
    // dummy read to clear flags
    (void)I2C1->SR2; // clear addr condition
 8000486:	4b04      	ldr	r3, [pc, #16]	@ (8000498 <I2CIsDeviceReady+0x38>)
 8000488:	699b      	ldr	r3, [r3, #24]
	return 1;
 800048a:	2301      	movs	r3, #1
}
 800048c:	4618      	mov	r0, r3
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	40005400 	.word	0x40005400

0800049c <I2CInit>:

void I2CInit() {
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
    // enable GPIOB clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80004a0:	4b43      	ldr	r3, [pc, #268]	@ (80005b0 <I2CInit+0x114>)
 80004a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a4:	4a42      	ldr	r2, [pc, #264]	@ (80005b0 <I2CInit+0x114>)
 80004a6:	f043 0302 	orr.w	r3, r3, #2
 80004aa:	6313      	str	r3, [r2, #48]	@ 0x30
	DelayMs(50);
 80004ac:	2032      	movs	r0, #50	@ 0x32
 80004ae:	f7ff ff0d 	bl	80002cc <DelayMs>

    // setup I2C pins
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80004b2:	4b3f      	ldr	r3, [pc, #252]	@ (80005b0 <I2CInit+0x114>)
 80004b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004b6:	4a3e      	ldr	r2, [pc, #248]	@ (80005b0 <I2CInit+0x114>)
 80004b8:	f043 0302 	orr.w	r3, r3, #2
 80004bc:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOB->MODER &= ~(3U << I2C1_SCL*2); // PB6
 80004be:	4b3d      	ldr	r3, [pc, #244]	@ (80005b4 <I2CInit+0x118>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a3c      	ldr	r2, [pc, #240]	@ (80005b4 <I2CInit+0x118>)
 80004c4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80004c8:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << I2C1_SCL*2); // AF
 80004ca:	4b3a      	ldr	r3, [pc, #232]	@ (80005b4 <I2CInit+0x118>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a39      	ldr	r2, [pc, #228]	@ (80005b4 <I2CInit+0x118>)
 80004d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004d4:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << I2C1_SCL);   // open-drain
 80004d6:	4b37      	ldr	r3, [pc, #220]	@ (80005b4 <I2CInit+0x118>)
 80004d8:	685b      	ldr	r3, [r3, #4]
 80004da:	4a36      	ldr	r2, [pc, #216]	@ (80005b4 <I2CInit+0x118>)
 80004dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004e0:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3U << I2C1_SCL*2); // no pull-up/down
 80004e2:	4b34      	ldr	r3, [pc, #208]	@ (80005b4 <I2CInit+0x118>)
 80004e4:	68db      	ldr	r3, [r3, #12]
 80004e6:	4a33      	ldr	r2, [pc, #204]	@ (80005b4 <I2CInit+0x118>)
 80004e8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80004ec:	60d3      	str	r3, [r2, #12]
    GPIOB->MODER &= ~(3U << I2C1_SDA*2); // PB7
 80004ee:	4b31      	ldr	r3, [pc, #196]	@ (80005b4 <I2CInit+0x118>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a30      	ldr	r2, [pc, #192]	@ (80005b4 <I2CInit+0x118>)
 80004f4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80004f8:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << I2C1_SDA*2); // AF
 80004fa:	4b2e      	ldr	r3, [pc, #184]	@ (80005b4 <I2CInit+0x118>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a2d      	ldr	r2, [pc, #180]	@ (80005b4 <I2CInit+0x118>)
 8000500:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000504:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << I2C1_SDA);   // open-drain
 8000506:	4b2b      	ldr	r3, [pc, #172]	@ (80005b4 <I2CInit+0x118>)
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	4a2a      	ldr	r2, [pc, #168]	@ (80005b4 <I2CInit+0x118>)
 800050c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000510:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3U << I2C1_SDA*2); // no pull-up/down
 8000512:	4b28      	ldr	r3, [pc, #160]	@ (80005b4 <I2CInit+0x118>)
 8000514:	68db      	ldr	r3, [r3, #12]
 8000516:	4a27      	ldr	r2, [pc, #156]	@ (80005b4 <I2CInit+0x118>)
 8000518:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800051c:	60d3      	str	r3, [r2, #12]

    // choose AF4 for I2C1 in Alternate Function registers
    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL6_Pos); // for pin 6
 800051e:	4b25      	ldr	r3, [pc, #148]	@ (80005b4 <I2CInit+0x118>)
 8000520:	6a1b      	ldr	r3, [r3, #32]
 8000522:	4a24      	ldr	r2, [pc, #144]	@ (80005b4 <I2CInit+0x118>)
 8000524:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000528:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL7_Pos); // for pin 7
 800052a:	4b22      	ldr	r3, [pc, #136]	@ (80005b4 <I2CInit+0x118>)
 800052c:	6a1b      	ldr	r3, [r3, #32]
 800052e:	4a21      	ldr	r2, [pc, #132]	@ (80005b4 <I2CInit+0x118>)
 8000530:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000534:	6213      	str	r3, [r2, #32]

    // enable I2C clock
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000536:	4b1e      	ldr	r3, [pc, #120]	@ (80005b0 <I2CInit+0x114>)
 8000538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800053a:	4a1d      	ldr	r2, [pc, #116]	@ (80005b0 <I2CInit+0x114>)
 800053c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000540:	6413      	str	r3, [r2, #64]	@ 0x40
	DelayMs(50);
 8000542:	2032      	movs	r0, #50	@ 0x32
 8000544:	f7ff fec2 	bl	80002cc <DelayMs>
    // reset and clear reg
    I2C1->CR1 = I2C_CR1_SWRST;
 8000548:	4b1b      	ldr	r3, [pc, #108]	@ (80005b8 <I2CInit+0x11c>)
 800054a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800054e:	601a      	str	r2, [r3, #0]
    I2C1->CR1 = 0;
 8000550:	4b19      	ldr	r3, [pc, #100]	@ (80005b8 <I2CInit+0x11c>)
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]

    I2C1->CR2 &= ~(I2C_CR2_ITERREN); // disable error interrupt
 8000556:	4b18      	ldr	r3, [pc, #96]	@ (80005b8 <I2CInit+0x11c>)
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	4a17      	ldr	r2, [pc, #92]	@ (80005b8 <I2CInit+0x11c>)
 800055c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000560:	6053      	str	r3, [r2, #4]
    I2C1->CCR &= ~(1 << I2C_CCR_FS_Pos); // standard mode (100 khz)
 8000562:	4b15      	ldr	r3, [pc, #84]	@ (80005b8 <I2CInit+0x11c>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	4a14      	ldr	r2, [pc, #80]	@ (80005b8 <I2CInit+0x11c>)
 8000568:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800056c:	61d3      	str	r3, [r2, #28]
    // Enable Ack
    I2C1->CR1 |= (1<<I2C_CR1_ACK_Pos);
 800056e:	4b12      	ldr	r3, [pc, #72]	@ (80005b8 <I2CInit+0x11c>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a11      	ldr	r2, [pc, #68]	@ (80005b8 <I2CInit+0x11c>)
 8000574:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000578:	6013      	str	r3, [r2, #0]
    // Thigh and Tlow needs to be 5us each

    // Let's pick fPCLK1 = 16Mhz, TPCLK1 = 1/16Mhz = 62.5ns
    // Thigh = CCR * TPCLK1 => 5us = CCR * 62.5ns
    // CCR = 80
    I2C1->CR2 |= (16 << I2C_CR2_FREQ_Pos); // 16Mhz PCLK
 800057a:	4b0f      	ldr	r3, [pc, #60]	@ (80005b8 <I2CInit+0x11c>)
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	4a0e      	ldr	r2, [pc, #56]	@ (80005b8 <I2CInit+0x11c>)
 8000580:	f043 0310 	orr.w	r3, r3, #16
 8000584:	6053      	str	r3, [r2, #4]
    I2C1->CCR |= (80 << I2C_CCR_CCR_Pos);
 8000586:	4b0c      	ldr	r3, [pc, #48]	@ (80005b8 <I2CInit+0x11c>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	4a0b      	ldr	r2, [pc, #44]	@ (80005b8 <I2CInit+0x11c>)
 800058c:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8000590:	61d3      	str	r3, [r2, #28]
    // Maximum rise time.
    // Calculation is (maximum_rise_time / Tpclk) + 1
    // In SM mode maximum allowed SCL rise time is 1000ns
    // For TPCLK1 = 62.5ns => (1000ns / 62.5ns) + 1 = 16 + 1 = 17
    I2C1->TRISE |= (17 << I2C_TRISE_TRISE_Pos); // program Trise to 17 for 100khz
 8000592:	4b09      	ldr	r3, [pc, #36]	@ (80005b8 <I2CInit+0x11c>)
 8000594:	6a1b      	ldr	r3, [r3, #32]
 8000596:	4a08      	ldr	r2, [pc, #32]	@ (80005b8 <I2CInit+0x11c>)
 8000598:	f043 0311 	orr.w	r3, r3, #17
 800059c:	6213      	str	r3, [r2, #32]
    // Enable I2C
    I2C1->CR1 |= I2C_CR1_PE;
 800059e:	4b06      	ldr	r3, [pc, #24]	@ (80005b8 <I2CInit+0x11c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a05      	ldr	r2, [pc, #20]	@ (80005b8 <I2CInit+0x11c>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6013      	str	r3, [r2, #0]
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023800 	.word	0x40023800
 80005b4:	40020400 	.word	0x40020400
 80005b8:	40005400 	.word	0x40005400

080005bc <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
	char str[32] = "";
 80005c2:	2300      	movs	r3, #0
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
 80005d4:	615a      	str	r2, [r3, #20]
 80005d6:	619a      	str	r2, [r3, #24]
	SystemInit();
 80005d8:	f000 f812 	bl	8000600 <SystemInit>
	EEPROM_Init();
 80005dc:	f7ff fdf4 	bl	80001c8 <EEPROM_Init>
	EEPROM_Write(0x0020, (uint8_t*)"ABHIJIT JADHAV!\r\n", 16);
 80005e0:	2210      	movs	r2, #16
 80005e2:	4906      	ldr	r1, [pc, #24]	@ (80005fc <main+0x40>)
 80005e4:	2020      	movs	r0, #32
 80005e6:	f7ff fe00 	bl	80001ea <EEPROM_Write>
	EEPROM_Read(0x0020, (uint8_t*)str, 16);
 80005ea:	463b      	mov	r3, r7
 80005ec:	2210      	movs	r2, #16
 80005ee:	4619      	mov	r1, r3
 80005f0:	2020      	movs	r0, #32
 80005f2:	f7ff fe2c 	bl	800024e <EEPROM_Read>
	while(1);
 80005f6:	bf00      	nop
 80005f8:	e7fd      	b.n	80005f6 <main+0x3a>
 80005fa:	bf00      	nop
 80005fc:	08000720 	.word	0x08000720

08000600 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  DWT_Init();
 8000604:	f000 f802 	bl	800060c <DWT_Init>
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}

0800060c <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000610:	4b14      	ldr	r3, [pc, #80]	@ (8000664 <DWT_Init+0x58>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	4a13      	ldr	r2, [pc, #76]	@ (8000664 <DWT_Init+0x58>)
 8000616:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800061a:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800061c:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <DWT_Init+0x58>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	4a10      	ldr	r2, [pc, #64]	@ (8000664 <DWT_Init+0x58>)
 8000622:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000626:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000628:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <DWT_Init+0x5c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a0e      	ldr	r2, [pc, #56]	@ (8000668 <DWT_Init+0x5c>)
 800062e:	f023 0301 	bic.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000634:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <DWT_Init+0x5c>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a0b      	ldr	r2, [pc, #44]	@ (8000668 <DWT_Init+0x5c>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000640:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <DWT_Init+0x5c>)
 8000642:	2200      	movs	r2, #0
 8000644:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000646:	bf00      	nop
    __ASM volatile ("NOP");
 8000648:	bf00      	nop
    __ASM volatile ("NOP");
 800064a:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 800064c:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <DWT_Init+0x5c>)
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	2b00      	cmp	r3, #0
 8000652:	bf0c      	ite	eq
 8000654:	2301      	moveq	r3, #1
 8000656:	2300      	movne	r3, #0
 8000658:	b2db      	uxtb	r3, r3
}
 800065a:	4618      	mov	r0, r3
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000edf0 	.word	0xe000edf0
 8000668:	e0001000 	.word	0xe0001000

0800066c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800066c:	480d      	ldr	r0, [pc, #52]	@ (80006a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800066e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000670:	f7ff ffc6 	bl	8000600 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000674:	480c      	ldr	r0, [pc, #48]	@ (80006a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000676:	490d      	ldr	r1, [pc, #52]	@ (80006ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000678:	4a0d      	ldr	r2, [pc, #52]	@ (80006b0 <LoopForever+0xe>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800067c:	e002      	b.n	8000684 <LoopCopyDataInit>

0800067e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000682:	3304      	adds	r3, #4

08000684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000688:	d3f9      	bcc.n	800067e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068a:	4a0a      	ldr	r2, [pc, #40]	@ (80006b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800068c:	4c0a      	ldr	r4, [pc, #40]	@ (80006b8 <LoopForever+0x16>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000690:	e001      	b.n	8000696 <LoopFillZerobss>

08000692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000694:	3204      	adds	r2, #4

08000696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000698:	d3fb      	bcc.n	8000692 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800069a:	f000 f811 	bl	80006c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069e:	f7ff ff8d 	bl	80005bc <main>

080006a2 <LoopForever>:

LoopForever:
  b LoopForever
 80006a2:	e7fe      	b.n	80006a2 <LoopForever>
  ldr   r0, =_estack
 80006a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ac:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80006b0:	0800073c 	.word	0x0800073c
  ldr r2, =_sbss
 80006b4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80006b8:	20000020 	.word	0x20000020

080006bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006bc:	e7fe      	b.n	80006bc <ADC_IRQHandler>
	...

080006c0 <__libc_init_array>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	4d0d      	ldr	r5, [pc, #52]	@ (80006f8 <__libc_init_array+0x38>)
 80006c4:	4c0d      	ldr	r4, [pc, #52]	@ (80006fc <__libc_init_array+0x3c>)
 80006c6:	1b64      	subs	r4, r4, r5
 80006c8:	10a4      	asrs	r4, r4, #2
 80006ca:	2600      	movs	r6, #0
 80006cc:	42a6      	cmp	r6, r4
 80006ce:	d109      	bne.n	80006e4 <__libc_init_array+0x24>
 80006d0:	4d0b      	ldr	r5, [pc, #44]	@ (8000700 <__libc_init_array+0x40>)
 80006d2:	4c0c      	ldr	r4, [pc, #48]	@ (8000704 <__libc_init_array+0x44>)
 80006d4:	f000 f818 	bl	8000708 <_init>
 80006d8:	1b64      	subs	r4, r4, r5
 80006da:	10a4      	asrs	r4, r4, #2
 80006dc:	2600      	movs	r6, #0
 80006de:	42a6      	cmp	r6, r4
 80006e0:	d105      	bne.n	80006ee <__libc_init_array+0x2e>
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80006e8:	4798      	blx	r3
 80006ea:	3601      	adds	r6, #1
 80006ec:	e7ee      	b.n	80006cc <__libc_init_array+0xc>
 80006ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80006f2:	4798      	blx	r3
 80006f4:	3601      	adds	r6, #1
 80006f6:	e7f2      	b.n	80006de <__libc_init_array+0x1e>
 80006f8:	08000734 	.word	0x08000734
 80006fc:	08000734 	.word	0x08000734
 8000700:	08000734 	.word	0x08000734
 8000704:	08000738 	.word	0x08000738

08000708 <_init>:
 8000708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800070a:	bf00      	nop
 800070c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800070e:	bc08      	pop	{r3}
 8000710:	469e      	mov	lr, r3
 8000712:	4770      	bx	lr

08000714 <_fini>:
 8000714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000716:	bf00      	nop
 8000718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800071a:	bc08      	pop	{r3}
 800071c:	469e      	mov	lr, r3
 800071e:	4770      	bx	lr
